name: Build Client

on:
  push:
    branches: [ main ]
    paths:
      - 'client/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'client/**'
  release:
    types: [published]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            goos: windows
            goarch: amd64
            output_name: Turbo.exe
            asset_name: Turbo_windows-amd64.exe

          - os: windows-latest
            goos: windows
            goarch: arm64
            output_name: Turbo.exe
            asset_name: Turbo_windows-arm64.exe

          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            output_name: turbo-client
            asset_name: Turbo_linux-amd64

          - os: ubuntu-24.04-arm
            goos: linux
            goarch: arm64
            output_name: turbo-client
            asset_name: Turbo_linux-arm64

          - os: macos-13
            goos: darwin
            goarch: amd64
            output_name: Turbo
            asset_name: Turbo_macos-amd64.dmg

          - os: macos-latest
            goos: darwin
            goarch: arm64
            output_name: Turbo
            asset_name: Turbo_macos-arm64.dmg

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.4'
        cache: true

    - name: Build Windows
      if: matrix.goos == 'windows'
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        cd client
        go build -ldflags="-H windowsgui -s -w" -o ../dist/${{ matrix.output_name }}

    - name: Create Windows Installer
      if: matrix.goos == 'windows' && matrix.goarch == 'amd64'
      run: |
        cd build
        iscc installer.iss

    - name: Build Linux
      if: matrix.goos == 'linux'
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        sudo apt update
        sudo apt-get install gcc libgtk-3-dev libayatana-appindicator3-dev
        
        mkdir -p dist
        cd client
        go build -ldflags="-s -w" -o ../dist/${{ matrix.output_name }}

    - name: Build macOS
      if: matrix.goos == 'darwin'
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        cd client
        go build -ldflags="-s -w" -o ../build/${{ matrix.output_name }}
        
        cd ../
        
        mkdir -p build/Turbo.app/Contents/MacOS
        cp build/${{ matrix.output_name }} build/Turbo.app/Contents/MacOS/Turbo
        
        brew install create-dmg || true
        mkdir -p dist
        create-dmg \
          --volname "Turbo Installer" \
          --volicon "build/assets/icon.icns" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "Turbo.app" 200 190 \
          --hide-extension "Turbo.app" \
          --app-drop-link 400 190 \
          "dist/${{ matrix.asset_name }}" \
          "build/Turbo.app" || cp -r build/Turbo.app "dist/Turbo.app"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          dist/${{ matrix.asset_name }}
          dist/${{ matrix.output_name }}
          dist/Turbo.app
        if-no-files-found: warn

    - name: Upload Windows Installer
      if: matrix.goos == 'windows' && matrix.goarch == 'amd64'
      uses: actions/upload-artifact@v4
      with:
        name: Turbo-setup.exe
        path: dist/Turbo-setup.exe
        if-no-files-found: warn

    - name: Upload Release Asset
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: dist/${{ matrix.asset_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}